# Dynamic Programmin 다이나믹 프로그래밍(=동적 계획법) : 한 번 계산한 문제는 다시 계산하지 않도록 하는 알고리즘
# 공간을 조금 더 사용해 연산속도를 비약적으로 증가시킨다.
# Top down과 Bottom Up 방식이 있다.

# 예시 1, 피보나치 수열
# 앞의 두 항의 합을 현재의 항으로 설정
# 재귀함수로 구현하면 n이 커질 수록 수행 시간이 기하급수적으로 늘어남
# 가령 f(6)을 계산할 때 f(3)은 3번 호출된다.
# 이 시간복잡도는 O(2^n)이다.
# 다이나믹 프로그래밍을 사용하면 효율적으로 해결 가능

# 다이나믹 프로그래밍을 사용할 수 있는 조건
# 1. 큰 문제를 작은 문제로 나눌 수 있다.
# 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

# 메모이제이션( Memoization ) 기법 : 한 번 구현한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출함녀 메모한 결과를 그대로 가져오는 기법
# 값을 저장하는 방법이므로 캐싱( Caching )이라고도 한다.

# 한 번 계산된 결과를 메모이제이션하기 위한 리스트 초기화
d=[0]*100

def fibo(x):
    if x==1 or x==2:
        return 1
    
    if d[x]!=0:
        return d[x]
    
    d[x]=fibo(x-1)+fibo(x-2)
    return d[x]

print(fibo(99))

# 함수를 호출하면 메모리상에 적재되는 일련의 과정을 거치므로 다이나믹 프로그래밍은 재귀함수보다는 반복문을 이용하는 게 성능이 좋다.
d=[0]*100

def pibo(x):
    d[1]=1
    d[2]=2
    n=99

    for i in range(3, n+1):
        d[i]=d[i-1]+d[i-2]
    
    print(d[n])